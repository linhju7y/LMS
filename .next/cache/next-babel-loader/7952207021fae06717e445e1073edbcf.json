{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Button, Card, Table } from \"antd\";\nvar columns = [{\n  title: 'Name',\n  dataIndex: 'name'\n}, {\n  title: 'Age',\n  dataIndex: 'age'\n}, {\n  title: 'Address',\n  dataIndex: 'address'\n}];\nvar data = [];\n\nfor (var i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: \"Edward King \".concat(i),\n    age: 32,\n    address: \"London, Park Lane no. \".concat(i)\n  });\n}\n\nvar Operation = /*#__PURE__*/function (_React$Component) {\n  _inherits(Operation, _React$Component);\n\n  var _super = _createSuper(Operation);\n\n  function Operation() {\n    var _this;\n\n    _classCallCheck(this, Operation);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      selectedRowKeys: [],\n      // Check here to configure the CRM column\n      loading: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"start\", function () {\n      _this.setState({\n        loading: true\n      }); // ajax request after empty completing\n\n\n      setTimeout(function () {\n        _this.setState({\n          selectedRowKeys: [],\n          loading: false\n        });\n      }, 1000);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectChange\", function (selectedRowKeys) {\n      console.log('selectedRowKeys changed: ', selectedRowKeys);\n\n      _this.setState({\n        selectedRowKeys: selectedRowKeys\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(Operation, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          loading = _this$state.loading,\n          selectedRowKeys = _this$state.selectedRowKeys;\n      var rowSelection = {\n        selectedRowKeys: selectedRowKeys,\n        onChange: this.onSelectChange\n      };\n      var hasSelected = selectedRowKeys.length > 0;\n      return __jsx(Card, {\n        title: \"Operation\"\n      }, __jsx(\"div\", {\n        className: \"gx-mb-3\"\n      }, __jsx(Button, {\n        type: \"primary\",\n        onClick: this.start,\n        disabled: !hasSelected,\n        loading: loading\n      }, \"Reload\"), __jsx(\"span\", {\n        style: {\n          marginLeft: 8\n        }\n      }, hasSelected ? \"Selected \".concat(selectedRowKeys.length, \" items\") : '')), __jsx(Table, {\n        className: \"gx-table-responsive\",\n        rowSelection: rowSelection,\n        columns: columns,\n        dataSource: data\n      }));\n    }\n  }]);\n\n  return Operation;\n}(React.Component);\n\nexport default Operation;","map":{"version":3,"sources":["C:/Users/HUNG PC/Desktop/1/TemplateNextjs/routes/components/table/Data/Operation.js"],"names":["React","Button","Card","Table","columns","title","dataIndex","data","i","push","key","name","age","address","Operation","selectedRowKeys","loading","setState","setTimeout","console","log","state","rowSelection","onChange","onSelectChange","hasSelected","length","start","marginLeft","Component"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,IAAhB,EAAsBC,KAAtB,QAAkC,MAAlC;AAEA,IAAMC,OAAO,GAAG,CAAC;AACfC,EAAAA,KAAK,EAAE,MADQ;AAEfC,EAAAA,SAAS,EAAE;AAFI,CAAD,EAGb;AACDD,EAAAA,KAAK,EAAE,KADN;AAEDC,EAAAA,SAAS,EAAE;AAFV,CAHa,EAMb;AACDD,EAAAA,KAAK,EAAE,SADN;AAEDC,EAAAA,SAAS,EAAE;AAFV,CANa,CAAhB;AAWA,IAAMC,IAAI,GAAG,EAAb;;AACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3BD,EAAAA,IAAI,CAACE,IAAL,CAAU;AACRC,IAAAA,GAAG,EAAEF,CADG;AAERG,IAAAA,IAAI,wBAAiBH,CAAjB,CAFI;AAGRI,IAAAA,GAAG,EAAE,EAHG;AAIRC,IAAAA,OAAO,kCAA2BL,CAA3B;AAJC,GAAV;AAMD;;IAEKM,S;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,eAAe,EAAE,EADX;AACe;AACrBC,MAAAA,OAAO,EAAE;AAFH,K;;4DAIA,YAAM;AACZ,YAAKC,QAAL,CAAc;AAACD,QAAAA,OAAO,EAAE;AAAV,OAAd,EADY,CAEZ;;;AACAE,MAAAA,UAAU,CAAC,YAAM;AACf,cAAKD,QAAL,CAAc;AACZF,UAAAA,eAAe,EAAE,EADL;AAEZC,UAAAA,OAAO,EAAE;AAFG,SAAd;AAID,OALS,EAKP,IALO,CAAV;AAMD,K;;qEACgB,UAACD,eAAD,EAAqB;AACpCI,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCL,eAAzC;;AACA,YAAKE,QAAL,CAAc;AAACF,QAAAA,eAAe,EAAfA;AAAD,OAAd;AACD,K;;;;;;;WAED,kBAAS;AACP,wBAAmC,KAAKM,KAAxC;AAAA,UAAOL,OAAP,eAAOA,OAAP;AAAA,UAAgBD,eAAhB,eAAgBA,eAAhB;AACA,UAAMO,YAAY,GAAG;AACnBP,QAAAA,eAAe,EAAfA,eADmB;AAEnBQ,QAAAA,QAAQ,EAAE,KAAKC;AAFI,OAArB;AAIA,UAAMC,WAAW,GAAGV,eAAe,CAACW,MAAhB,GAAyB,CAA7C;AACA,aACE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAC;AAAZ,SACE;AAAK,QAAA,SAAS,EAAC;AAAf,SACE,MAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,OAAO,EAAE,KAAKC,KAFhB;AAGE,QAAA,QAAQ,EAAE,CAACF,WAHb;AAIE,QAAA,OAAO,EAAET;AAJX,kBADF,EASE;AAAM,QAAA,KAAK,EAAE;AAACY,UAAAA,UAAU,EAAE;AAAb;AAAb,SACGH,WAAW,sBAAeV,eAAe,CAACW,MAA/B,cAAgD,EAD9D,CATF,CADF,EAcE,MAAC,KAAD;AAAO,QAAA,SAAS,EAAC,qBAAjB;AAAuC,QAAA,YAAY,EAAEJ,YAArD;AAAmE,QAAA,OAAO,EAAElB,OAA5E;AAAqF,QAAA,UAAU,EAAEG;AAAjG,QAdF,CADF;AAkBD;;;;EA7CqBP,KAAK,CAAC6B,S;;AAiD9B,eAAef,SAAf","sourcesContent":["import React from \"react\";\r\nimport {Button, Card, Table} from \"antd\";\r\n\r\nconst columns = [{\r\n  title: 'Name',\r\n  dataIndex: 'name',\r\n}, {\r\n  title: 'Age',\r\n  dataIndex: 'age',\r\n}, {\r\n  title: 'Address',\r\n  dataIndex: 'address',\r\n}];\r\n\r\nconst data = [];\r\nfor (let i = 0; i < 46; i++) {\r\n  data.push({\r\n    key: i,\r\n    name: `Edward King ${i}`,\r\n    age: 32,\r\n    address: `London, Park Lane no. ${i}`,\r\n  });\r\n}\r\n\r\nclass Operation extends React.Component {\r\n  state = {\r\n    selectedRowKeys: [], // Check here to configure the CRM column\r\n    loading: false,\r\n  };\r\n  start = () => {\r\n    this.setState({loading: true});\r\n    // ajax request after empty completing\r\n    setTimeout(() => {\r\n      this.setState({\r\n        selectedRowKeys: [],\r\n        loading: false,\r\n      });\r\n    }, 1000);\r\n  };\r\n  onSelectChange = (selectedRowKeys) => {\r\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\r\n    this.setState({selectedRowKeys});\r\n  };\r\n\r\n  render() {\r\n    const {loading, selectedRowKeys} = this.state;\r\n    const rowSelection = {\r\n      selectedRowKeys,\r\n      onChange: this.onSelectChange,\r\n    };\r\n    const hasSelected = selectedRowKeys.length > 0;\r\n    return (\r\n      <Card title=\"Operation\">\r\n        <div className=\"gx-mb-3\">\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={this.start}\r\n            disabled={!hasSelected}\r\n            loading={loading}\r\n          >\r\n            Reload\r\n          </Button>\r\n          <span style={{marginLeft: 8}}>\r\n            {hasSelected ? `Selected ${selectedRowKeys.length} items` : ''}\r\n          </span>\r\n        </div>\r\n        <Table className=\"gx-table-responsive\" rowSelection={rowSelection} columns={columns} dataSource={data}/>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Operation;\r\n"]},"metadata":{},"sourceType":"module"}